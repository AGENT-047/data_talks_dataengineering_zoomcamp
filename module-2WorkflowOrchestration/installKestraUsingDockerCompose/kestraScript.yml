id: postgres_taxi_data_ingestion
namespace: dev


inputs:
  - id: taxi_selection
    type: SELECT
    values: ["green","yellow"]
    defaults: "green"
    displayName: select Taxi


  - id: month_selection
    type: SELECT
    values: ["01","02","03","04","05","06","07","08","09","10","11","12"]
    defaults: "01"
    displayName: select Month

  - id: year_selection
    type: SELECT
    values: ["2019","2020"]
    defaults: "2019"
    displayName: select Year


variables:
  file: "{{inputs.taxi_selection}}_tripdata_{{inputs.year_selection}}-{{inputs.month_selection}}.csv"
  staging_table: "public.{{inputs.taxi_selection}}_tripdata_staging"
  table: "public.{{inputs.taxi_selection}}_tripdata"
  data: "{{outputs.extract.outputFiles[inputs.taxi_selection ~ '_tripdata_' ~ inputs.year_selection ~ '-' ~ inputs.month_selection ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels: 
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi_selection}}"


  - id: logger
    type: io.kestra.plugin.core.log.Log
    message: wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi_selection}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}


  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles: 
      - "*.csv"
    taskRunner: 
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi_selection}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}



  - id: if_green_taxi
    type: "io.kestra.plugin.core.flow.If"
    condition: "{{inputs.taxi_selection == 'green'}}"
    then: 


    - id: green_create_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
            unique_row_id          text,
            filename               text,
            VendorID               text,
            lpep_pickup_datetime   timestamp,
            lpep_dropoff_datetime  timestamp,
            store_and_fwd_flag     text,
            RatecodeID             text,
            PULocationID           text,
            DOLocationID           text,
            passenger_count        integer,
            trip_distance          double precision,
            fare_amount            double precision,
            extra                  double precision,
            mta_tax                double precision,
            tip_amount             double precision,
            tolls_amount           double precision,
            ehail_fee              double precision,
            improvement_surcharge  double precision,
            total_amount           double precision,
            payment_type           integer,
            trip_type              integer,
            congestion_surcharge   double precision
        );

    - id: green_create_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
            unique_row_id          text,
            filename               text,
            VendorID               text,
            lpep_pickup_datetime   timestamp,
            lpep_dropoff_datetime  timestamp,
            store_and_fwd_flag     text,
            RatecodeID             text,
            PULocationID           text,
            DOLocationID           text,
            passenger_count        integer,
            trip_distance          double precision,
            fare_amount            double precision,
            extra                  double precision,
            mta_tax                double precision,
            tip_amount             double precision,
            tolls_amount           double precision,
            ehail_fee              double precision,
            improvement_surcharge  double precision,
            total_amount           double precision,
            payment_type           integer,
            trip_type              integer,
            congestion_surcharge   double precision
        );

    - id: green_truncate_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        TRUNCATE TABLE {{render(vars.staging_table)}}
  



    - id: green_copy_in_to_staging_table
      type: io.kestra.plugin.jdbc.postgresql.CopyIn
      format: CSV
      from: "{{render(vars.data)}}"
      table: "{{render(vars.staging_table)}}"
      header: true
      columns: [VendorID,lpep_pickup_datetime,lpep_dropoff_datetime,store_and_fwd_flag,RatecodeID,PULocationID,DOLocationID,passenger_count,trip_distance,fare_amount,extra,mta_tax,tip_amount,tolls_amount,ehail_fee,improvement_surcharge,total_amount,payment_type,trip_type,congestion_surcharge]

    - id: green_add_unique_id_and_filename
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        UPDATE {{render(vars.staging_table)}}
        SET 
          unique_row_id = md5(
            COALESCE(CAST(VendorID AS text), '') ||
            COALESCE(CAST(lpep_pickup_datetime AS text), '') || 
            COALESCE(CAST(lpep_dropoff_datetime AS text), '') || 
            COALESCE(PULocationID, '') || 
            COALESCE(DOLocationID, '') || 
            COALESCE(CAST(fare_amount AS text), '') || 
            COALESCE(CAST(trip_distance AS text), '')      
          ),
          filename = '{{render(vars.file)}}';




    - id: green_merge_data
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        insert INTO {{render(vars.table)}}( unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag,RatecodeID, PULocationID, DOLocationID, passenger_count,trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee,improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge )select S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime,S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count,S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee,S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge from {{render(vars.staging_table)}} s left join {{render(vars.table)}}  t on  T.unique_row_id = S.unique_row_id where t.unique_row_id is null;

  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi_selection == 'yellow'}}"
    then:
      - id: yellow_create_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
              unique_row_id          text,
              filename               text,
              VendorID               text,
              tpep_pickup_datetime   timestamp,
              tpep_dropoff_datetime  timestamp,
              passenger_count        integer,
              trip_distance          double precision,
              RatecodeID             text,
              store_and_fwd_flag     text,
              PULocationID           text,
              DOLocationID           text,
              payment_type           integer,
              fare_amount            double precision,
              extra                  double precision,
              mta_tax                double precision,
              tip_amount             double precision,
              tolls_amount           double precision,
              improvement_surcharge  double precision,
              total_amount           double precision,
              congestion_surcharge   double precision
          );

      - id: yellow_create_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
              unique_row_id          text,
              filename               text,
              VendorID               text,
              tpep_pickup_datetime   timestamp,
              tpep_dropoff_datetime  timestamp,
              passenger_count        integer,
              trip_distance          double precision,
              RatecodeID             text,
              store_and_fwd_flag     text,
              PULocationID           text,
              DOLocationID           text,
              payment_type           integer,
              fare_amount            double precision,
              extra                  double precision,
              mta_tax                double precision,
              tip_amount             double precision,
              tolls_amount           double precision,
              improvement_surcharge  double precision,
              total_amount           double precision,
              congestion_surcharge   double precision
          );

      - id: yellow_truncate_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          TRUNCATE TABLE {{render(vars.staging_table)}};

      - id: yellow_copy_in_to_staging_table
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{render(vars.data)}}"
        table: "{{render(vars.staging_table)}}"
        header: true
        columns: [VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,PULocationID,DOLocationID,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,congestion_surcharge]

      - id: yellow_add_unique_id_and_filename
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          UPDATE {{render(vars.staging_table)}}
          SET 
            unique_row_id = md5(
              COALESCE(CAST(VendorID AS text), '') ||
              COALESCE(CAST(tpep_pickup_datetime AS text), '') || 
              COALESCE(CAST(tpep_dropoff_datetime AS text), '') || 
              COALESCE(PULocationID, '') || 
              COALESCE(DOLocationID, '') || 
              COALESCE(CAST(fare_amount AS text), '') || 
              COALESCE(CAST(trip_distance AS text), '')      
            ),
            filename = '{{render(vars.file)}}';

      - id: yellow_merge_data
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          insert INTO {{render(vars.table)}} (unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
              passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
              DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
              improvement_surcharge, total_amount, congestion_surcharge
            )select S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
              S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
              S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
              S.improvement_surcharge, S.total_amount, S.congestion_surcharge 
              from {{render(vars.staging_table)}} AS S left join {{render(vars.table)}} as t 
              on T.unique_row_id = S.unique_row_id where  t.unique_row_id is null;
              

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files. If you'd like to explore Kestra outputs, disable it.

  



pluginDefaults:
- type: io.kestra.plugin.jdbc.postgresql
  values:
    url: jdbc:postgresql://pgdatabase:5432/ny_taxi
    username: root
    password: root
  

